
#Область ПрограммныйИнтерфейс

Функция СведенияОВнешнейОбработке() Экспорт
	
    ПараметрыРегистрации = Новый Структура;
    ПараметрыРегистрации.Вставить("Вид", "ДополнительнаяОбработка");

    ПараметрыРегистрации.Вставить("Наименование", "Интеграция с Sentry");
    ПараметрыРегистрации.Вставить("Версия", "1.0");
    ПараметрыРегистрации.Вставить("БезопасныйРежим", Ложь);
    ПараметрыРегистрации.Вставить("Информация", "Интеграция с Sentry");
	
	ТаблицаКоманд = ПолучитьТаблицуКоманд();
	
	ДобавитьКоманду(
		ТаблицаКоманд,
	    "Выгрузка журнала регистрации в Sentry",
	    "ВыгрузкаЖурналаРегистрацииSentry",
	    "ВызовСерверногоМетода",
	    Истина,"");
	
	ДобавитьКоманду(
		ТаблицаКоманд,
	    "Настройки интеграции с Sentry",
	    "НастройкиИнтеграцииSentry",
	    "ОткрытиеФормы",
	    Истина,"");
		
    ПараметрыРегистрации.Вставить("Команды", ТаблицаКоманд);
	
	Возврат ПараметрыРегистрации;
	
КонецФункции

Процедура ВыполнитьКоманду(Идентификатор, ОбъектыНазначения = Неопределено) Экспорт
	
	Если Идентификатор = "ВыгрузкаЖурналаРегистрацииSentry" Тогда
		ВыгрузитьЖурналРегистрацииВSentry();
	ИначеЕсли Идентификатор = "НастройкиИнтеграцииSentry" Тогда
		
	КонецЕсли;
					
КонецПроцедуры

Функция ВыгрузитьЖурналРегистрацииВSentry() Экспорт
	
	ЗначениеКонстанты = ХранилищеОбщихНастроек.Загрузить("Sentry", "НастройкиИнтеграции", , "Sentry");
	Если ЗначениеКонстанты = Неопределено Тогда
		НастройкиИнтеграции = Неопределено;
	Иначе
		НастройкиИнтеграции = ЗначениеКонстанты.Получить();
	КонецЕсли;

	Если Не ЗначениеЗаполнено(НастройкиИнтеграции) Тогда
		ВызватьИсключение "Не заполнены настройки интеграции с Sentry";	
	КонецЕсли;
	
	ПараметрыПодключения = Новый Соответствие;
	ПараметрыПодключения.Вставить("Content-Type", "application/json");
	X_Sentry_Auth = СтрШаблон(
						"Sentry sentry_version=%1, sentry_key=%2", 
						НастройкиИнтеграции.SentryVersion, 
						НастройкиИнтеграции.SecurityToken);
	ПараметрыПодключения.Вставить("X-Sentry-Auth", X_Sentry_Auth);

	Протокол = Лев(НастройкиИнтеграции.DSN, СтрНайти(НастройкиИнтеграции.DSN, "//") + 1);
	Если ВРег(Протокол) = ВРег("https://") Тогда
		ЗащищенноеСоединение = Новый ЗащищенноеСоединениеOpenSSL;
	Иначе
		ЗащищенноеСоединение = Неопределено;
	КонецЕсли;
	
	HTTPСоединение = Новый HTTPСоединение(НастройкиИнтеграции.Server, , , , , , ЗащищенноеСоединение);
	HTTPЗапрос = Новый HTTPЗапрос(СтрШаблон("/api/%1/store/", НастройкиИнтеграции.ProjectID), ПараметрыПодключения);
	
	МассивУровнейЖурнала = Новый Массив;
	МассивУровнейЖурнала.Добавить(УровеньЖурналаРегистрации.Ошибка);
	МассивУровнейЖурнала.Добавить(УровеньЖурналаРегистрации.Предупреждение);
	
	ДатаНачала = НастройкиИнтеграции.ДатаВыгрузки;
	ДатаОкончания = ТекущаяДата();
	Результат = Истина;
	
	Для Каждого УровеньЖурнала Из МассивУровнейЖурнала Цикл
		
		ОтборЖурнала = Новый Структура();
		ОтборЖурнала.Вставить("ДатаНачала", ДатаНачала);
		ОтборЖурнала.Вставить("ДатаОкончания", ДатаОкончания);
		ОтборЖурнала.Вставить("Уровень", УровеньЖурнала);
		УровеньЖурналаSentry = ПолучитьУровень(УровеньЖурнала);
		
		СобытияЖурналаТекущийДень = Новый ТаблицаЗначений;
		ВыгрузитьЖурналРегистрации(СобытияЖурналаТекущийДень ,ОтборЖурнала);
		СобытияЖурналаТекущийДень.Сортировать("ПредставлениеМетаданных, ПредставлениеСобытия");
		
		Для Каждого СтрокаЖурнала Из СобытияЖурналаТекущийДень Цикл
			
			Тело = СформироватьТелоСообщенияSentry(СтрокаЖурнала, УровеньЖурналаSentry);
			HTTPЗапрос.УстановитьТелоИзСтроки(СформироватьJSON(Тело));
			
			HTTPОтвет = HTTPСоединение.ОтправитьДляОбработки(HTTPЗапрос);      
			Ответ = HTTPОтвет.ПолучитьТелоКакСтроку();
			
			КодСостоянияУспешно = 200;
			Если HTTPОтвет.КодСостояния <> КодСостоянияУспешно Тогда
				ЗаписьЖурналаРегистрации(
					ИмяСобытияЖурналаРегистрации(),
					УровеньЖурналаРегистрации.Ошибка,
					Метаданные.Справочники.ДополнительныеОтчетыИОбработки, 
					Справочники.ДополнительныеОтчетыИОбработки.НайтиПоНаименованию(Метаданные().Имя),
					Ответ);
				Результат = Ложь;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Если Результат Тогда
		НастройкиИнтеграции.ДатаВыгрузки = ДатаОкончания;
		ЗначениеКонстанты = Новый ХранилищеЗначения(НастройкиИнтеграции);	
		ХранилищеОбщихНастроек.Сохранить("Sentry", "НастройкиИнтеграции", ЗначениеКонстанты, , "Sentry");
	КонецЕсли;
		
	Возврат Результат;
	
КонецФункции

Функция ИмяСобытияЖурналаРегистрации() Экспорт
	Возврат НСтр("ru = 'Интеграция с Sentry'");
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьТаблицуКоманд()
    Команды = Новый ТаблицаЗначений;
    Команды.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка"));
    Команды.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"));
    Команды.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка"));
    Команды.Колонки.Добавить("ПоказыватьОповещение", Новый ОписаниеТипов("Булево"));
    Команды.Колонки.Добавить("Модификатор", Новый ОписаниеТипов("Строка"));
    Возврат Команды;
КонецФункции

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")
    НоваяКоманда = ТаблицаКоманд.Добавить();
    НоваяКоманда.Представление = Представление;
    НоваяКоманда.Идентификатор = Идентификатор;
    НоваяКоманда.Использование = Использование;
    НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение;
    НоваяКоманда.Модификатор = Модификатор;
КонецПроцедуры

Функция СформироватьJSON(ТекстСообщения)
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON, ТекстСообщения);
	
	Возврат ЗаписьJSON.Закрыть();
	
КонецФункции

Функция СформироватьТелоСообщенияSentry(СтрокаЖурнала, УровеньЖурналаSentry)
	
	СистемнаяИнформация = Новый СистемнаяИнформация;
	TimeStamp = УниверсальноеВремя(СтрокаЖурнала.Дата, ЧасовойПояс()) - '19700101';
	СтрокаСоединения = СтрокаСоединенияИнформационнойБазы();
	МнСтрокаСоединения = СтрЗаменить(СтрокаСоединения, ";", Символы.ПС);
	ИмяБазы = СтрЗаменить(СтрЗаменить(СтрПолучитьСтроку(МнСтрокаСоединения, 2), "Ref=", ""), """", "");
	
	МаксимальныйРазмерКомментария = 10000; // Event payload size limit is 200kb.
	Комментарий = Лев(СтрокаЖурнала.Комментарий, МаксимальныйРазмерКомментария);
	
	Тело = Новый Структура();
	Тело.Вставить("timestamp", TimeStamp);
	Тело.Вставить("logger", "1C_Sentry_logger");
	Тело.Вставить("platform", "Other"); 
	Тело.Вставить("level", УровеньЖурналаSentry);
	Тело.Вставить("transaction", СтрокаЖурнала.Транзакция);
	Тело.Вставить("server_name", СтрокаЖурнала.РабочийСервер);
	Тело.Вставить("release", Метаданные.Версия);
	Тело.Вставить("dist", ИмяБазы); 
	Тело.Вставить("environment", Строка(СистемнаяИнформация.ВерсияПриложения));
	Тело.Вставить("message", Комментарий);
	
	Тело.Вставить("tags", Новый Структура);
	Тело["tags"].Вставить("context", "production");
	
	// Дополнительная информация
	Тело.Вставить("extra", Новый Структура);
	Тело["extra"].Вставить("Pport", СтрокаЖурнала.ОсновнойIPПорт);
	Тело["extra"].Вставить("Metadata", СтрокаЖурнала.ПредставлениеМетаданных);
	Если СтрокаЖурнала.Данные <> Неопределено Тогда
		Тело["extra"].Вставить("Data", Строка(СтрокаЖурнала.Данные));
	КонецЕсли;
	
	//По ключу "exception" идет группировка ошибок
	
	МодульОшибки = МодульОшибки(СтрокаЖурнала.Комментарий, Комментарий);
	СтекВызова = СтекВызова(СтрокаЖурнала.Комментарий);
	
	Тело.Вставить("exception", Новый Структура);
	Тело["exception"].Вставить("values", Новый Массив);
	СтуктураException = Новый Структура;
	СтуктураException.Вставить("type", СтрокаЖурнала.ПредставлениеСобытия);
	СтуктураException.Вставить("value", МодульОшибки);
	СтуктураException.Вставить("stacktrace", СтекВызова);
	Тело["exception"]["values"].Добавить(СтуктураException);  
	
	Тело.Вставить("contexts", Новый Структура);
	Тело["contexts"].Вставить("device", Новый Структура);
	Тело["contexts"]["device"].вставить("type", "device");
	Тело["contexts"]["device"].вставить("name", СтрокаЖурнала.Компьютер);
	Тело["contexts"]["device"].вставить("family", "PC");
	
	Тело["contexts"].Вставить("os", Новый Структура);
	Тело["contexts"]["os"].вставить("name", Строка(СистемнаяИнформация.ТипПлатформы));
	Тело["contexts"]["os"].вставить("version", Строка(СистемнаяИнформация.ВерсияОС));
	
	Тело["contexts"].Вставить("app", Новый Структура);
	Тело["contexts"]["app"].вставить("app_name", СтрокаЖурнала.ИмяПриложения);
	Тело["contexts"]["app"].вставить("build_type", СтрокаЖурнала.ПредставлениеПриложения);
	Тело["contexts"]["app"].вставить("app_version", СистемнаяИнформация.ВерсияПриложения);
	Тело["contexts"]["app"].вставить("app_identifier", "");
	Тело["contexts"]["app"].вставить("app_start_time", "");
	Тело["contexts"]["app"].вставить("app_build", "");
	
	Тело["contexts"].Вставить("session_data", Новый Структура);
	Тело["contexts"]["session_data"].вставить("session", СтрокаЖурнала.сеанс);
	Тело["contexts"]["session_data"].вставить("connection", СтрокаЖурнала.соединение);
	
	Data = Новый Структура;
	Data.Вставить("metadata", СтрокаЖурнала.Метаданные);
	Data.Вставить("record", СтрокаЖурнала.ПредставлениеДанных);
	Data.Вставить("module", МодульОшибки);
	
	Тело.Вставить("breadcrumbs", Новый Структура);
	Тело["breadcrumbs"].Вставить("values", Новый Массив);
	
	СтруктураBreadcrumbs = Новый Структура;
	СтруктураBreadcrumbs.Вставить("timestamp", TimeStamp);
	СтруктураBreadcrumbs.Вставить("message", Комментарий);
	СтруктураBreadcrumbs.Вставить("category", СтрокаЖурнала.ПредставлениеСобытия);
	СтруктураBreadcrumbs.Вставить("data", Data);
	Тело["breadcrumbs"]["values"].Добавить(СтруктураBreadcrumbs);  
	
	Тело.Вставить("user", Новый Структура);
	Тело["user"].Вставить("id", Строка(СтрокаЖурнала.Пользователь));
	Тело["user"].Вставить("username", СтрокаЖурнала.ИмяПользователя);
	// Тело["user"].Вставить("ip_address", "");
	
	Возврат Тело;
	
КонецФункции

Функция ПолучитьУровень(УровеньЖР)
	
	СоответствииУровней = Новый Соответствие;
	СоответствииУровней.Вставить(УровеньЖурналаРегистрации.Ошибка, "error");
	СоответствииУровней.Вставить(УровеньЖурналаРегистрации.Предупреждение, "warning");
	
	Уровень = СоответствииУровней.Получить(УровеньЖР);
	
	Возврат Уровень;
	
КонецФункции

Функция МодульОшибки(ТекстОшибки, Комментарий)

	МодульОшибки = "";
	СтрокиОшибки = СтрРазделить(ТекстОшибки, Символы.ПС);
	Для Каждого СтрокаОшибки Из СтрокиОшибки Цикл
		
		Если Не СтрНайти(СтрокаОшибки, ")}:") Тогда
			Продолжить;
		КонецЕсли;
				
		МодульОшибки =  Сред(СтрокаОшибки, 2, СтрНайти(СтрокаОшибки, "(") - 2);
		
		Прервать;
			
	КонецЦикла;
	
	Возврат МодульОшибки;

КонецФункции

Функция СтекВызова(ТекстОшибки)
	
	СтекВызова = Новый Структура;
	СтекВызова.Вставить("frames", Новый Массив);
	
	СтрокиОшибки = СтрРазделить(ТекстОшибки, Символы.ПС);
	НомерТекущийСтроки = СтрокиОшибки.Количество() - 1;
	
	Пока НомерТекущийСтроки >= 0 Цикл
		
		СтрокаОшибки = СтрокиОшибки.Получить(НомерТекущийСтроки);
		НомерТекущийСтроки = НомерТекущийСтроки - 1;
		
		Если Не СтрНайти(СтрокаОшибки, ")}:") Тогда
			Продолжить;
		КонецЕсли;
				
		СтруктураFrame = Новый Структура;
		СтруктураFrame.Вставить("module", Сред(СтрокаОшибки, 2, СтрНайти(СтрокаОшибки, "}:") - 2));
		СтруктураFrame.Вставить("function", СокрЛП(Сред(СтрокаОшибки, СтрНайти(СтрокаОшибки, ")}:") + 3)));
		СтруктураFrame.Вставить("raw_function", СтрокаОшибки);
		
		СтекВызова["frames"].Добавить(СтруктураFrame);
			
	КонецЦикла;
	
	Возврат СтекВызова;
	
КонецФункции

#КонецОбласти

	
	